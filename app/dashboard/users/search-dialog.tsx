"use client";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Loader, Search } from "lucide-react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { ChangeEvent, useState } from "react";
import { trpc } from "@/trpc/client";
import { User } from "@prisma/client";
import Link from "next/link";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Search users",
  description: "Generated by create next app",
};
export function SearchUserDialog() {
  const [searchQ, setSearchQ] = useState("");
  const { data, isFetching, refetch } = trpc.users.search.useQuery(searchQ);

  async function onChange(e: ChangeEvent<HTMLInputElement>) {
    if (e.target.value.length < 4) return;
    setSearchQ(e.target.value);
    await refetch();
  }

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button className="gap-2">
          <Search size={16} />
          Search for a user
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Search for a user</DialogTitle>
          <DialogDescription>
            You can find any user by searching their username.
          </DialogDescription>
        </DialogHeader>
        <div className="relative grid gap-4 py-4">
          <div className="pointer-events-none absolute bottom-0 right-0 top-0 flex items-center justify-center pr-4">
            {isFetching && <Loader className="animate-spin" size={16} />}
          </div>
          <Input placeholder="Username...." onChange={onChange} />
        </div>
        <ul className="flex flex-col gap-2">
          {Boolean(data?.length) || (
            <li className="text-center text-sm text-muted-foreground">
              No Result
            </li>
          )}
          {data?.map((user) => <SearchedUserCard key={user.id} user={user} />)}
        </ul>
      </DialogContent>
    </Dialog>
  );
}

function SearchedUserCard({ user }: { user: User }) {
  return (
    <li className="flex items-center gap-2">
      <Avatar>
        <AvatarFallback className="font-semibold uppercase">
          {user.username[0]}
        </AvatarFallback>
      </Avatar>
      <Link href={`/dashboard/users/${user.id}/view`} className="flex flex-col">
        <span>{user.username}</span>
        <p className="text-xs text-muted-foreground">{user.secret}</p>
      </Link>
    </li>
  );
}
